[ { "BlackBox" :
    { "name" : "Clash.Explicit.Testbench.assert"
    , "type" :
"assert
  :: (Eq a,ShowX a)           -- (ARG[0],ARG[1])
  => Clock domain gated       -- ARG[2]
  -> Reset domain synchronous -- ARG[3]
  -> String                   -- ARG[4]
  -> Signal domain a          -- Checked value  (ARG[5])
  -> Signal domain a          -- Expected value (ARG[6])
  -> Signal domain b          -- Return valued  (ARG[7])
  -> Signal domain b"
    , "templateD" :
"// assert begin
// pragma translate_off
always @(posedge ~IF ~ISGATED[2] ~THEN ~ARG[2][1] ~ELSE ~ARG[2] ~FI~IF ~ISSYNC[3] ~THEN ~ELSE or negedge ~ARG[3]~FI) begin
  if (~ARG[5] !== ~ARG[6]) begin
    $display(\"@%0tns: %s, expected: %b, actual: %b\", $time, ~LIT[4], ~ARG[6], ~ARG[5]);
    $finish;
  end
end
// pragma translate_on
assign ~RESULT = ~ARG[7];
// assert end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Explicit.Testbench.assertBitVector"
    , "type" :
"assertBitVector
  :: KnownNat n                  --                 ARG[0]
  => Clock domain gated          --                 ARG[1]
  -> Reset domain synchronous    --                 ARG[2]
  -> String                      --                 ARG[3]
  -> Signal domain (BitVector n) -- Checked value  (ARG[4])
  -> Signal domain (BitVector n) -- Expected value (ARG[5])
  -> Signal domain b             -- Return valued  (ARG[6])
  -> Signal domain b"
    , "templateD" :
"// assertBitVector begin
// pragma translate_off
wire ~TYP[5] ~GENSYM[maskOr][0] = ~ARG[5] ^ ~ARG[5];
wire ~TYP[5] ~GENSYM[maskAnd][1] = ~ ~SYM[0];

always @(posedge ~IF ~ISGATED[1] ~THEN ~ARG[1][1] ~ELSE ~ARG[1] ~FI~IF ~ISSYNC[2] ~THEN ~ELSE or negedge ~ARG[2]~FI) begin
  if ((~SYM[1] & ~ARG[4] | ~SYM[0]) !== (~SYM[1] & ~ARG[5] | ~SYM[0])) begin
    $display(\"@%0tns: %s, expected: %b, actual: %b\", $time, ~LIT[3], ~ARG[5], ~ARG[4]);
    $finish;
  end
end
// pragma translate_on
assign ~RESULT = ~ARG[6];
// assertBitVector end"
    }
  }
]
